import { useEffect, useMemo, useState } from "react";
import {
  CartesianGrid,
  Cell,
  Line,
  LineChart,
  Pie,
  PieChart,
  ResponsiveContainer,
  Tooltip,
  XAxis,
  YAxis,
} from "recharts";

import { useTransactions } from "../../hooks/useTransactions";
import { useAccounts } from "../../hooks/useAccounts";
import { useAuth } from "../../providers/AuthProvider";
import { formatCurrency } from "../../utils/format";
import { aggregateByMonth, aggregateCategories } from "../../utils/analytics";

const tooltipDateFormat = new Intl.DateTimeFormat("pt-BR", {
  day: "2-digit",
  month: "long",
  year: "numeric",
});

const donutColors = ["#7367ff", "#ff8a3d", "#20d68f", "#4dd4ff", "#ea5bff", "#ffcf33"];

const calcDelta = (current: number, previous: number) => {
  if (!previous) {
    return {
      label: "+0%",
      variant: "neutral" as const,
    };
  }

  const diff = current - previous;
  const pct = (diff / previous) * 100;
  const variant = diff >= 0 ? "positive" : "negative";
  return {
    label: `${diff >= 0 ? "+" : ""}${pct.toFixed(1)}% vs mês anterior`,
    variant,
  };
};

const SummaryCard = ({
  title,
  value,
  delta,
  glow,
}: {
  title: string;
  value: number;
  delta: ReturnType<typeof calcDelta>;
  glow?: "orange" | "green" | "none";
}) => (
  <div className="glass-card flex flex-col gap-3 p-5" data-glow={glow ?? "none"}>
    <p className="text-sm font-medium text-[rgba(255,255,255,0.6)] uppercase tracking-wide">{title}</p>
    <strong className="text-2xl font-semibold text-[var(--color-text-primary)]">
      {formatCurrency(value)}
    </strong>
    <span
      className={
        delta.variant === "positive"
          ? "text-xs font-semibold text-[#3fdd8c]"
          : delta.variant === "negative"
          ? "text-xs font-semibold text-[#ff607d]"
          : "text-xs font-semibold text-[rgba(255,255,255,0.55)]"
      }
    >
      {delta.label}
    </span>
  </div>
);

export const DashboardPage = () => {
  const { user } = useAuth();
  const firstName = useMemo(
    () => (user?.user_metadata?.full_name as string | undefined)?.split(" ")[0] ?? "Usuário",
    [user],
  );
  const { data: entries = [] } = useTransactions("entrada");
  const { data: exits = [] } = useTransactions("saida");
  const { data: accounts = [] } = useAccounts();
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  const monthly = useMemo(
    () =>
      aggregateByMonth(
        entries.map((item) => ({ amount: item.amount ?? 0, date: item.date })),
        exits.map((item) => ({ amount: item.amount ?? 0, date: item.date })),
      ),
    [entries, exits],
  );

  const categories = useMemo(
    () =>
      aggregateCategories(
        entries.map((item) => ({ amount: item.amount ?? 0, category: item.category })),
        exits.map((item) => ({ amount: item.amount ?? 0, category: item.category })),
      ),
    [entries, exits],
  );

  const entradasPorCategoria = useMemo(
    () =>
      categories
        .map((categoria) => ({ name: categoria.categoria, value: categoria.entradas }))
        .filter((item) => item.value > 0),
    [categories],
  );

  const saidasPorCategoria = useMemo(
    () =>
      categories
        .map((categoria) => ({ name: categoria.categoria, value: categoria.saidas }))
        .filter((item) => item.value > 0),
    [categories],
  );

  const totalEntradas = useMemo(
    () => entries.reduce((sum, item) => sum + (item.amount ?? 0), 0),
    [entries],
  );

  const totalSaidas = useMemo(
    () => exits.reduce((sum, item) => sum + (item.amount ?? 0), 0),
    [exits],
  );

  const saldoAtual = totalEntradas - totalSaidas;

  const currentMonthKey = monthly.at(-1)?.key;
  const previousMonthKey = monthly.at(-2)?.key;

  const currentMonthEntradas = monthly.find((item) => item.key === currentMonthKey)?.entradas ?? 0;
  const previousMonthEntradas = monthly.find((item) => item.key === previousMonthKey)?.entradas ?? 0;
  const currentMonthSaidas = monthly.find((item) => item.key === currentMonthKey)?.saidas ?? 0;
  const previousMonthSaidas = monthly.find((item) => item.key === previousMonthKey)?.saidas ?? 0;

  const totalContasAPagar = useMemo(
    () =>
      accounts
        .filter((item) => item.status !== "pago")
        .reduce((sum, item) => sum + (item.amount ?? 0), 0),
    [accounts],
  );

  const upcomingAccounts = useMemo(() => {
    return accounts
      .filter((item) => item.status !== "pago")
      .sort((a, b) => new Date(a.due_date ?? "").getTime() - new Date(b.due_date ?? "").getTime())
      .slice(0, 5);
  }, [accounts]);

  const summaryCards = [
    {
      title: "Receitas do mês",
      value: currentMonthEntradas,
      delta: calcDelta(currentMonthEntradas, previousMonthEntradas),
      glow: "none" as const,
    },
    {
      title: "Despesas do mês",
      value: currentMonthSaidas,
      delta: calcDelta(currentMonthSaidas, previousMonthSaidas),
      glow: "none" as const,
    },
    {
      title: "Saldo atual",
      value: saldoAtual,
      delta: calcDelta(
        currentMonthEntradas - currentMonthSaidas,
        previousMonthEntradas - previousMonthSaidas,
      ),
      glow: "none" as const,
    },
    {
      title: "Contas a pagar",
      value: totalContasAPagar,
      delta: { label: `${upcomingAccounts.length} próximas`, variant: "neutral" as const },
      glow: "orange" as const,
    },
  ];

  const hasEntradaCategories = entradasPorCategoria.length > 0;
  const hasSaidaCategories = saidasPorCategoria.length > 0;

  return (
    <div className="flex flex-col gap-8">
      <div className="flex flex-col gap-1">
        <h1 className="text-2xl font-semibold text-[var(--color-text-primary)]">Olá, {firstName}.</h1>
        <p className="text-sm text-[rgba(255,255,255,0.55)]">Bem-vindo ao seu painel financeiro.</p>
      </div>

      <section className="grid gap-4 md:grid-cols-2 xl:grid-cols-4">
        {summaryCards.map((card) => (
          <SummaryCard key={card.title} {...card} />
        ))}
      </section>

      <section className="grid gap-6 xl:grid-cols-[2fr,1fr]">
        <div className="glass-card flex flex-col gap-5 p-6" data-glow="purple">
          <header className="flex items-center justify-between">
            <div>
              <h2 className="text-lg font-semibold text-[var(--color-text-primary)]">Fluxo financeiro</h2>
              <p className="text-sm text-[var(--color-text-muted)]">Entradas e saídas nos últimos meses.</p>
            </div>
          </header>
          <div className="h-72 w-full">
            <ResponsiveContainer>
              <LineChart data={monthly} margin={{ top: 10, right: 10, left: 0, bottom: 0 }}>
                <defs>
                  <linearGradient id="lineEntrada" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="0%" stopColor="#7367ff" stopOpacity={0.9} />
                    <stop offset="100%" stopColor="#7367ff" stopOpacity={0.2} />
                  </linearGradient>
                  <linearGradient id="lineSaida" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="0%" stopColor="#ff8a3d" stopOpacity={0.9} />
                    <stop offset="100%" stopColor="#ff8a3d" stopOpacity={0.2} />
                  </linearGradient>
                </defs>
                <CartesianGrid stroke="rgba(255,255,255,0.08)" vertical={false} />
                <XAxis dataKey="month" tickLine={false} axisLine={false} tick={{ fill: "rgba(255,255,255,0.45)", fontSize: 12 }} />
                <YAxis tickLine={false} axisLine={false} tick={{ fill: "rgba(255,255,255,0.45)", fontSize: 12 }} tickFormatter={(value: number) => formatCurrency(value)} width={75} />
                <Tooltip
                  formatter={(value: number, name) => [formatCurrency(value), name === "entradas" ? "Entradas" : "Saídas"]}
                  labelFormatter={(label) => label}
                  contentStyle={{
                    background: "rgba(10, 15, 30, 0.92)",
                    borderRadius: "14px",
                    border: "1px solid rgba(120,130,170,0.25)",
                    color: "var(--color-text-primary)",
                  }}
                />
                <Line type="monotone" dataKey="entradas" stroke="url(#lineEntrada)" strokeWidth={3} dot={false} activeDot={{ r: 6, fill: "#7367ff" }} />
                <Line type="monotone" dataKey="saidas" stroke="url(#lineSaida)" strokeWidth={3} dot={false} activeDot={{ r: 6, fill: "#ff8a3d" }} />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </div>

        <div className="flex flex-col gap-6">
          <div className="glass-card flex flex-col gap-4 p-6" data-glow="orange">
            <header className="flex items-center justify-between">
              <div>
                <h3 className="text-base font-semibold text-[var(--color-text-primary)]">Entradas por categoria</h3>
                <p className="text-xs text-[rgba(255,255,255,0.55)]">Distribuição das receitas.</p>
              </div>
            </header>
            <div className="flex h-60 w-full items-center justify-center">
              {mounted && hasEntradaCategories ? (
                <ResponsiveContainer>
                  <PieChart>
                    <Tooltip formatter={(value: number) => formatCurrency(value as number)} />
                    <Pie
                      data={entradasPorCategoria}
                      dataKey="value"
                      nameKey="name"
                      innerRadius={60}
                      outerRadius={90}
                      paddingAngle={5}
                      startAngle={90}
                      endAngle={-270}
                    >
                      {entradasPorCategoria.map((_, idx) => (
                        <Cell key={`entrada-${idx}`} fill={donutColors[idx % donutColors.length]} stroke="var(--color-bg)" strokeWidth={5} />
                      ))}
                    </Pie>
                  </PieChart>
                </ResponsiveContainer>
              ) : (
                <span className="text-sm text-[rgba(255,255,255,0.55)]">Sem dados suficientes.</span>
              )}
            </div>
          </div>

          <div className="glass-card flex flex-col gap-4 p-6" data-glow="orange">
            <header className="flex items-center justify-between">
              <div>
                <h3 className="text-base font-semibold text-[var(--color-text-primary)]">Saídas por categoria</h3>
                <p className="text-xs text-[rgba(255,255,255,0.55)]">Gastos distribuídos por categoria.</p>
              </div>
            </header>
            <div className="flex h-60 w-full items-center justify-center">
              {mounted && hasSaidaCategories ? (
                <ResponsiveContainer>
                  <PieChart>
                    <Tooltip formatter={(value: number) => formatCurrency(value as number)} />
                    <Pie
                      data={saidasPorCategoria}
                      dataKey="value"
                      nameKey="name"
                      innerRadius={60}
                      outerRadius={90}
                      paddingAngle={5}
                      startAngle={90}
                      endAngle={-270}
                    >
                      {saidasPorCategoria.map((_, idx) => (
                        <Cell key={`saida-${idx}`} fill={donutColors[idx % donutColors.length]} stroke="var(--color-bg)" strokeWidth={5} />
                      ))}
                    </Pie>
                  </PieChart>
                </ResponsiveContainer>
              ) : (
                <span className="text-sm text-[rgba(255,255,255,0.55)]">Sem dados suficientes.</span>
              )}
            </div>
          </div>
        </div>
      </section>

      <section className="grid gap-6 xl:grid-cols-[2fr,1fr]">
        <div className="glass-card flex flex-col gap-4 p-6" data-glow="none">
          <header className="flex items-center justify-between">
            <div>
              <h3 className="text-base font-semibold text-[var(--color-text-primary)]">Próximos vencimentos</h3>
              <p className="text-xs text-[rgba(255,255,255,0.55)]">Contas pendentes nos próximos dias.</p>
            </div>
          </header>
          <div className="overflow-x-auto">
            <table className="table-neon">
              <thead>
                <tr>
                  <th className="pr-6">Nome</th>
                  <th className="pr-6">Data</th>
                  <th className="pr-6">Valor</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody>
                {upcomingAccounts.length === 0 ? (
                  <tr>
                    <td colSpan={4} className="py-6 text-center text-sm text-[rgba(255,255,255,0.55)]">
                      Nenhuma conta pendente encontrada.
                    </td>
                  </tr>
                ) : (
                  upcomingAccounts.map((account) => (
                    <tr key={account.id}>
                      <td className="pr-6 text-[var(--color-text-primary)] font-medium">{account.title}</td>
                      <td className="pr-6">
                        {account.due_date ? tooltipDateFormat.format(new Date(account.due_date)) : "-"}
                      </td>
                      <td className="pr-6 text-[var(--color-text-primary)]">{formatCurrency(account.amount ?? 0)}</td>
                      <td>
                        <span
                          className="status-badge"
                          data-variant={account.status === "pago" ? "paid" : account.status === "atrasado" ? "late" : "pending"}
                        >
                          {account.status}
                        </span>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        </div>

        <div className="glass-card flex flex-col gap-4 p-6" data-glow="orange">
          <header>
            <h3 className="text-base font-semibold text-[var(--color-text-primary)]">Resumo geral</h3>
            <p className="text-xs text-[rgba(255,255,255,0.55)]">Indicadores do período atual.</p>
          </header>
          <ul className="flex flex-col gap-3 text-sm text-[rgba(255,255,255,0.7)]">
            <li className="flex items-center justify-between">
              <span>Receitas totais</span>
              <span className="font-semibold text-[var(--color-text-primary)]">{formatCurrency(totalEntradas)}</span>
            </li>
            <li className="flex items-center justify-between">
              <span>Despesas totais</span>
              <span className="font-semibold text-[var(--color-text-primary)]">{formatCurrency(totalSaidas)}</span>
            </li>
            <li className="flex items-center justify-between">
              <span>Saldo acumulado</span>
              <span className="font-semibold text-[var(--color-text-primary)]">{formatCurrency(saldoAtual)}</span>
            </li>
            <li className="flex items-center justify-between">
              <span>Contas pendentes</span>
              <span className="font-semibold text-[#ffb84c]">{upcomingAccounts.length}</span>
            </li>
          </ul>
        </div>
      </section>
    </div>
  );
};

export default DashboardPage;

